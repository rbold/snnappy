/* sim_fig7c.hoc
 *
 * NEURON hoc code for generating figure 7c
 *
 * Copyright (c) 2012, Jeffrey P Gill and Shang-Shen Yu
 *
 * This file is part of NEURON Reconstruction of Susswein et al. 2002.
 * 
 * NEURON Reconstruction of Susswein et al. 2002 is free software: you can
 * redistribute it and/or modify it under the terms of the GNU General Public
 * License as published by the Free Software Foundation, either version 3 of
 * the License, or (at your option) any later version.
 * 
 * NEURON Reconstruction of Susswein et al. 2002 is distributed in the hope
 * that it will be useful, but WITHOUT ANY WARRANTY; without even the implied
 * warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 * 
 * You should have received a copy of the GNU General Public License
 * along with NEURON Reconstruction of Susswein et al. 2002.  If not, see
 * <http://www.gnu.org/licenses/>.
 */


// load gui and standard run library
load_file("nrngui.hoc")

// create neurons
load_file("create_b63s.hoc")
load_file("create_b63a.hoc")
load_file("create_b31.hoc")

// create electrical and chemical synapses
load_file("create_es.hoc")
load_file("create_cs.hoc")

// create stim object
objref stim[2]
b31 stim[0] = new IClamp(0.5)
b31 stim[1] = new IClamp(0.5)

// stim to b31
stim[0].del = 3000   // (ms) -- estimated from figure
stim[0].dur = 725    // (ms) -- estimated from figure
stim[0].amp = 6.12   // (nA) -- published value (9.80) elicits burst

// stim to b31
stim[1].del = 21000  // (ms) -- estimated from figure
stim[1].dur = 725    // (ms) -- estimated from figure
stim[1].amp = 6.13   // (nA) -- published value (9.82) is much greater than threshold

// initialize simulation
v_init = -60         // (mV)
tstop  = 43000       // (ms) -- estimated from figure
cvode.active(1)      // enable variable time steps
finitialize()        // initialize state variables (INITIAL blocks)
fcurrent()           // initialize all currents    (BREAKPOINT blocks)

// create plots
objref plots[7]
for i = 0, 6 {
   plots[i] = new Graph(0)
   addplot(plots[i], 0)
}
// view: xmin, ymin, xrange, yrange, winleft, wintop, winwidth, winheight
plots[0].view(0, -70, tstop, 70,  0,   0,   600, 110)
plots[1].view(0, 0,   tstop, 2.0, 0,   210, 600, 110)
plots[2].view(0, -70, tstop, 75,  0,   420, 600, 110)
plots[3].view(0, 0,   tstop, 1,   0,   630, 600, 110)
plots[4].view(0, 0,   tstop, 1.0, 820, 210, 600, 110)
plots[5].view(0, -5,  tstop, 30,  820, 420, 600, 110)
plots[6].view(0, 0,   tstop, 1,   820, 630, 600, 110)
plots[0].addvar("B31 Vm",   "b31.v(0.5)")
plots[1].addvar("B31 G_Na", "b31_Na.g")
plots[2].addvar("B31 I_Na", "b31_Na.i")
plots[3].addvar("B31 A_Na", "b31_Na.A", 2, 1)
plots[3].addvar("B31 B_Na", "b31_Na.B", 3, 1)
plots[4].addvar("B31 G_K",  "b31_K.g")
plots[5].addvar("B31 I_K",  "b31_K.i")
plots[6].addvar("B31 A_K",  "b31_K.A",  2, 1)
plots[6].addvar("B31 B_K",  "b31_K.B",  3, 1)

// run simulation
run()
